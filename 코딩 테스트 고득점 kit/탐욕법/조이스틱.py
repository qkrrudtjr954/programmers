from icecream import icINF = 1000000ALPHABET_MOVES = {a: min(idx, 26 - idx) for idx, a in enumerate('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}def get_next_str(current_idx, new_name, name):    left_idx = current_idx    left_moves = 0    while new_name[left_idx] == name[left_idx]:        left_idx = left_idx - 1 if left_idx > 0 else left_idx - 1 + len(new_name)        left_moves += 1    right_idx = current_idx    right_moves = 0    while new_name[right_idx] == name[right_idx]:        right_idx = right_idx + 1 if right_idx < len(name) - 1 else right_idx + 1 - len(name)        right_moves += 1    return (right_idx, right_moves) if right_moves <= left_moves else (left_idx, left_moves)def solution(name):    name = list(name)    total_moves = sum([ALPHABET_MOVES[s] for s in name])    new_name = ['A'] * len(name)    current_idx = 0    while new_name != name:        next_idx, moves = get_next_str(current_idx=current_idx, new_name=new_name, name=name)        new_name[current_idx] = name[current_idx]        total_moves += moves        current_idx = next_idx    return total_movesif __name__ == '__main__':    print(solution('AAAAB'))    print(solution('JEROEN'))    print(solution('JAN'))